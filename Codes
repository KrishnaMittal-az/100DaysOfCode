# DAY 1
#User function Template for python3

class Solution:
    def isDigitSumPalindrome(self, n):
        #code here
        x = 0
        for i in str(n):
            x += int(i)
        ori = x
        new = 0
        # print(x)
        for i in range(len(str(x))):
            rem = x%10
            new = new * 10 + rem
            x = x//10
        if(ori == new):
            return 1
        else:
            return 0
            
# DAY 2
#User function Template for python3
import math
class Solution:
    def find_median(self, v):
        # Code here
        item = 0
        l = len(v)
        v.sort()
#         print(v)
        if (l % 2 != 0):
            b = l//2
            item = v[b]
        else:
            b1 = v[int(l/2)]
            b2 = v[int((l/2)-1)]
            item = (math.floor((b1+b2)/2))
        return item

# DAY 3

class Solution:
    def armstrongNumber (self, n):
        # code here 
        ans = 0
        for i in str(n):
            ans += int(i)**3
        if(ans == n):
            return "Yes"
        else:
            return "No"
# DAY 4
	def _sum(self,arr, n):
   		# code here
   		ans = 0
   		for i in arr:
   		    ans+=i
   		return ans

# DAY 5
class Solution:
    def leftElement(self, arr, n):
    # Your code goes here  
        arr.sort()
        if(n%2!=0):
            return(arr[(n//2)])
        else:
            return (arr[(n//2)-1])
# DAY 6
class Solution {
    public int findNumbers(int[] nums) {
        int count = 0;
        for (int i = 0 ; i < nums.length ; i++)
        {
            if(even(nums[i]))
            {
                count++;
            }
        }
        return count;
    }

    static boolean even(int number){

        int numberofdigits = digits(number);
        if(numberofdigits % 2 ==0)
        {
            return true;
        }
        return false;
    }
    static int digits(int n){
        int count = 0;
        while(n>0)
        {
            count++;
            n = n/10;
        }
        return count;
    }
}
