# DAY 1
#User function Template for python3

class Solution:
    def isDigitSumPalindrome(self, n):
        #code here
        x = 0
        for i in str(n):
            x += int(i)
        ori = x
        new = 0
        # print(x)
        for i in range(len(str(x))):
            rem = x%10
            new = new * 10 + rem
            x = x//10
        if(ori == new):
            return 1
        else:
            return 0
            
# DAY 2
#User function Template for python3
import math
class Solution:
    def find_median(self, v):
        # Code here
        item = 0
        l = len(v)
        v.sort()
#         print(v)
        if (l % 2 != 0):
            b = l//2
            item = v[b]
        else:
            b1 = v[int(l/2)]
            b2 = v[int((l/2)-1)]
            item = (math.floor((b1+b2)/2))
        return item

# DAY 3

class Solution:
    def armstrongNumber (self, n):
        # code here 
        ans = 0
        for i in str(n):
            ans += int(i)**3
        if(ans == n):
            return "Yes"
        else:
            return "No"
# DAY 4
	def _sum(self,arr, n):
   		# code here
   		ans = 0
   		for i in arr:
   		    ans+=i
   		return ans

# DAY 5
class Solution:
    def leftElement(self, arr, n):
    # Your code goes here  
        arr.sort()
        if(n%2!=0):
            return(arr[(n//2)])
        else:
            return (arr[(n//2)-1])
# DAY 6
class Solution {
    public int findNumbers(int[] nums) {
        int count = 0;
        for (int i = 0 ; i < nums.length ; i++)
        {
            if(even(nums[i]))
            {
                count++;
            }
        }
        return count;
    }

    static boolean even(int number){

        int numberofdigits = digits(number);
        if(numberofdigits % 2 ==0)
        {
            return true;
        }
        return false;
    }
    static int digits(int n){
        int count = 0;
        while(n>0)
        {
            count++;
            n = n/10;
        }
        return count;
    }
}
# DAY 7
class Solution {
    public int maximumWealth(int[][] accounts) {
        int maxi = 0;
        for (int i = 0 ; i < accounts.length ; i++)
        {
        int sum = 0;
            for(int j = 0 ; j < accounts[i].length ; j++)
            {
                sum += accounts[i][j];
            }
            if(sum > maxi)
            {
                maxi = sum;
            }
        }
        return maxi;
    }

}
# DAY 8
class Solution:
    def twoSum(self,s,tar):
        l=[]
        for i in range(len(s)):
            for j in range(i+1,len(s)):
                if s[i]+s[j]==tar:
                    return [i,j]
        return []
# DAY 9
class Solution(object):
    def reverseWords(self, s):
        s = s.split()
        s = s[::-1]
        s = tuple(s)
        a = " ".join(s)   
        return a
# DAY 10
class Solution {
public:
    int reverse(int x) {

        int ans = 0;
        while(x != 0)
        {
            int digit = x % 10;
            if((ans>INT_MAX/10)||(ans<INT_MIN/10))
            {
                return 0;
            }
            ans = ans * 10 + digit;
            x = x /10;
        }
        return ans;
    }
};
# DAY 11
class Solution(object):
    def removeDuplicates(self, nums):
        index = 0
        while(index < len(nums)):
            if(nums.count(nums[index]) > 1):
                nums.remove(nums[index])
            else:
                index+=1
        return len(nums)


# DAY 12
class Solution(object):
    def differenceOfSums(self, n, m):
        """
        :type n: int
        :type m: int
        :rtype: int
        """
        num1 = 0
        num2 = 0
        for i in range(1 , n+1):
            if(i%m==0):
                num2+=i
            else:
                num1+=i
        return (num1 - num2)

# DAY 13
class Solution {
public:
    int bitwiseComplement(int n) {
       int m = n;
       int mask = 0;
       if(n == 0)
           return 1;
       
       while(m != 0)
       {
           mask = (mask<<1) | 1;
           m = m >> 1;
       }
       int ans = (~n) & mask;
       return ans;
    }
};

# DAY 14
class Solution:
    def get(self, a, b):
        x=[]
        a,b=b,a
        x.append(a)
        x.append(b)
        return x

# DAY 15
class Solution {
public:
    bool isPowerOfTwo(int n) {
        for (int i = 0 ; i <= 30 ; i++)
        {
            int ans = pow(2,i);
            if(ans == n)
            {
                return true;
            }
        }
        return false;
    }
};
# DAY 16
class Solution {
    public char nextGreatestLetter(char[] letters, char target) {
        int start = 0;
        int end = letters.length - 1;
        while(start<=end)
        {
            int mid = start + ((end - start)/2);
            if(target<letters[mid])
            {
                end = mid - 1;
            }
            else
            {
                start = mid + 1;
            }
        }
        return letters[start % letters.length];
    }
}

# DAY 17
class Solution {
    public int peakIndexInMountainArray(int[] arr) {
        int start = 0;
        int end = arr.length - 1;
        while(start < end){
            int mid = start + (end - start) / 2;
            if(arr[mid]<arr[mid +1]){
                start = mid +1;
            }else{
                end = mid;
            }
        }
        return start;
    }
}

# DAY 18
/**
 * // This is MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface MountainArray {
 *     public int get(int index) {}
 *     public int length() {}
 * }
 */
 
class Solution {
     public int findInMountainArray(int target, MountainArray mountainArr){
    //    int[] arr = {1,2,3,4,5,3,1};
        // int target = 3;
        // System.out.println(Peak(arr));
        int peak = Peak(mountainArr);
        int start = 0;
        int end = mountainArr.length() - 1;
        int first = binsearchasc(mountainArr, target, start, peak);
        if(first != -1)
        {
            return first;
        }
        else{
        int second = binsearchdesc(mountainArr, target, peak +1, end);
        // System.out.println(second);
        return second;
        }
    }

    static int Peak(MountainArray arr)
    {
        int start = 0;
        int end = arr.length() - 1;
        while(start < end)
        {
            int mid = start + (end - start) / 2;
            if(arr.get(mid) > arr.get(mid+1))
            {
                end = mid;
            }
            else if(arr.get(mid) < arr.get(mid+1))
            {
                start = mid + 1;
            }
        }
        return start;
    }

    static int binsearchasc(MountainArray arr , int target , int start , int end)
    {
        while(start <= end)
        {
            int mid = start + (end - start ) / 2 ;
            if(target == arr.get(mid))
            {
                return mid;
            }
            else if(target < arr.get(mid))
            {
                end = mid - 1;
            }
            else
            {
                start = mid + 1;
            }
        }
        return -1;
    }
    static int binsearchdesc(MountainArray arr , int target , int start , int end)
    {
        while(start <= end)
        {
            int mid = start + (end - start ) / 2 ;
            if(target == arr.get(mid))
            {
                return mid;
            }
            else if(target < arr.get(mid))
            {
                start = mid + 1;
            }
            else
            {
                end = mid - 1;
            }
        }
        return -1;
    }


}

# DAY 19
class Solution {
public:
    bool uniqueOccurrences(vector<int>& arr) {

        vector<int> ans;
        int size = arr.size();
        sort(arr.begin(),arr.end());
        int i = 0;
        while(i < size)
        {
            int count = 1 ;
            for (int j = i + 1 ; j < size ; j++)
            {
                if(arr[i] == arr[j])
                {
                    count++;
                }
                else
                {
                    break;
                }
            }
            ans.push_back(count);
            i = i + count;
        }
        size = ans.size();
        sort(ans.begin(),ans.end());
        for(int i = 0 ; i < size - 1 ; i++)
        {
            if(ans[i] == ans[i+1])
            {
                return false;
            }
            
        }
        return true;
    }
};
# DAY 20
import java.util.HashMap;
import java.util.Collection;
class Solution {
    public boolean isIsomorphic(String s, String t) {
		boolean flag = true;
		HashMap<String, String>hm1 = new HashMap<String, String>();
		for(int index = 0; index<s.length(); index++){
			String strs =Character.toString(s.charAt(index));
			String strt =Character.toString(t.charAt(index));
			
			if(hm1.containsKey(strs)) {
				if(!hm1.get(strs).equals(strt)) {
					flag = false;
					break;
				}
			}else {
				Collection <String> values = hm1.values();
				if(values.contains(strt)) {
					flag = false;
					break;
				}else {
					hm1.put(strs, strt);
				}
			}
		}
		return  flag;
	}
}
# DAY 21
class Solution:
    def sumOfTheDigitsOfHarshadNumber(self, x: int) -> int:
        new = x
        sum1 = 0
        while(x>0):
            rem = x%10
            sum1 = sum1 + rem
            x = x//10
        if(new%sum1==0):
            return sum1
        else:
            return -1

# DAY 22
class Solution:
    def fizzBuzz(self, n: int) -> List[str]:
        l = []
        for i in range(1,n+1):
            if(i%3==0 and i%5==0):
                l.append("FizzBuzz")
            elif(i%3==0):
                l.append("Fizz")
            elif(i%5==0):
                l.append("Buzz")
            else:
                l.append(str(i))
        return l
# DAY 23
class Solution {
    public void sortColors(int[] arr) {
        for (int i = 0 ; i < arr.length ; i++)
        {
            boolean swap = false;
            for (int j = 1 ; j < arr.length - i ; j++)
            {
                if (arr[j] < arr[j - 1])
                {
                    int temp = arr[j];
                    arr[j] = arr[j-1];
                    arr[j-1] = temp;
                    swap = true;
                }
            }
            if(swap == false)
            {
                break;
            }
        }

    }
}
# DAY 24
class Solution {
    public int strStr(String haystack, String needle) {
        if(haystack.contains(needle))
        {
            return haystack.indexOf(needle);
        }
        return -1;
    }
}

